openapi: 3.0.3
info:
  title: Fingerprint server API
  description: Schema describes Fingerprint public server API
  version: '3'
tags:
  - name: Fingerprint
    externalDocs:
      description: API documentation
      url: https://dev.fingerprint.com/docs/server-api
servers:
  - url: https://api.fpjs.io
    description: Global
  - url: https://eu.api.fpjs.io
    description: EU
  - url: https://ap.api.fpjs.io
    description: Asia (Mumbai)
security:
  - ApiKeyHeader: [ ]
  - ApiKeyQuery: [ ]
paths:
  /visitors/{visitor_id}:
    get:
      tags:
        - Fingerprint
      operationId: 'getVisits'
      description: This endpoint allows you to get a history of visits with all available information. Use the visitorId as a URL path parameter. This API method is scoped to a visitor, i.e. all returned information is by visitorId.
      parameters:
        - name: visitor_id
          in: path
          required: true
          schema:
            type: string
          example: uYIm7Ksp5rf00SllPhFp
        - name: request_id
          description: Filter events by requestId
          in: query
          schema:
            type: string
        #          example: 1654815516083.OX6kx8
        - name: linked_id
          description: Filter events by custom identifier
          in: query
          schema:
            type: string
          required: false
        #          example: some_id
        - name: limit
          description: Limit scanned results
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        #            default: 0
        #          example: 10
        - name: before
          description: Used to paginate results
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
      #            default: 0
      #          example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                limit1:
                  summary: Request with limit=1
                  externalValue: '/examples/visits_limit_1.json'
                limit500:
                  summary: Request with limit=500
                  externalValue: '/examples/visits_limit_500.json'
        '429':
          description: Too Many Requests
          headers:
            Retry-After:
              description: Indicates how long the user should wait before making a follow-up request.
              schema:
                type: integer
                format: int32
                minimum: 0
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManyRequestsResponse'
  /webhook:
    trace:
      tags:
        - Fingerprint
      description: Fake path to describe webhook format. More information about webhooks can be found in the [documentation](https://dev.fingerprint.com/docs/webhooks)
      callbacks:
        webhook:
          webhook:
            post:
              description: You can use HTTP basic authentication and setup credentials in your [Fingerprint account](https://dashboard.fingerprint.com/login)
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      $ref: '#/components/schemas/WebhookVisit'
                    example:
                      externalValue: '/examples/webhook.json'
components:
  securitySchemes:
    ApiKeyHeader:
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: Auth-API-Key  # name of the header, query parameter or cookie
    ApiKeyQuery:
      type: apiKey
      in: query       # can be "header", "query" or "cookie"
      name: api_key  # name of the header, query parameter or cookie
  schemas:
    Response:
      type: object
      additionalProperties: false
      properties:
        visitorId:
          type: string
        visits:
          type: array
          items:
            $ref: '#/components/schemas/Visit'
        lastTimestamp:
          type: integer
          format: int64
          example: 1654815517198
        paginationKey:
          type: string
          example: '1654815517198.azN4IZ'
      required:
        - visitorId
        - visits
      title: PaginatedResponse
      description: Fields `lastTimestamp` and `paginationKey` added when `limit` or `before` parameter provided and there is more data to show
    ManyRequestsResponse:
      type: object
      additionalProperties: false
      properties:
        error:
          type: string
          example: 'request throttled'
      required:
        - error
    WebhookVisit:
      allOf:
        - type: object
          properties:
            visitorId:
              type: string
            clientReferrer:
              type: string
          required:
            - visitorId
        - $ref: '#/components/schemas/Visit'
    Visit:
      type: object
      additionalProperties: false
      properties:
        requestId:
          type: string
          example: '1654815516083.OX6kx8'
        browserDetails:
          $ref: '#/components/schemas/BrowserDetails'
        incognito:
          type: boolean
        ip:
          type: string
          format: ipv4
          example: '8.8.8.8'
        ipLocation:
          $ref: '#/components/schemas/IPLocation'
        timestamp:
          type: integer
          format: int64
          example: 1654815516086
        time:
          type: string
          format: date-time
          example: '2022-06-09T22:58:36Z'
        url:
          type: string
          format: uri
          example: 'https://some.website/path?query=params'
        tag:
          type: object
          additionalProperties: true
        linkedId:
          type: string
          example: 'someID'
        confidence:
          $ref: '#/components/schemas/Confidence'
        visitorFound:
          type: boolean
        firstSeenAt:
          schema:
            $ref: '#/components/schemas/StSeenAt'
          example:
            global: '2022-05-05T18:28:54.535Z'
            subscription: '2022-06-09T22:58:05.576Z'
        lastSeenAt:
          schema:
            $ref: '#/components/schemas/StSeenAt'
          example:
            global: '2022-06-09T22:58:35.795Z'
            subscription: null
      required:
        - browserDetails
        - confidence
        - firstSeenAt
        - incognito
        - ip
        - ipLocation
        - lastSeenAt
        - requestId
        - tag
        - time
        - timestamp
        - url
        - visitorFound
      title: Visit
    BrowserDetails:
      type: object
      additionalProperties: false
      properties:
        browserName:
          type: string
          example: 'Chrome'
        browserMajorVersion:
          type: string
          example: '101'
        browserFullVersion:
          type: string
          example: '101.0.4951'
        os:
          type: string
          example: 'Windows'
        osVersion:
          type: string
          example: '10'
        device:
          type: string
          example: 'Other'
        userAgent:
          type: string
          example: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41 Safari/537.36'
        botProbability:
          type: integer
      required:
        - browserFullVersion
        - browserMajorVersion
        - browserName
        - device
        - os
        - osVersion
        - userAgent
      title: BrowserDetails
    Confidence:
      type: object
      additionalProperties: false
      properties:
        score:
          type: number
          format: float
          minimum: 0
          maximum: 1
      required:
        - score
      title: Confidence
    StSeenAt:
      type: object
      additionalProperties: false
      properties:
        global:
          type: string
          format: date-time
        subscription:
          type: string
          nullable: true
          format: date-time
      required:
        - global
        - subscription
      title: StSeenAt
    IPLocation:
      type: object
      additionalProperties: false
      properties:
        accuracyRadius:
          type: integer
          minimum: 0
          example: 1000
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
          example: 37.75
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
          example: -97.82
        postalCode:
          type: string
          example: '130 00'
        timezone:
          type: string
          format: timezone
          example: 'America/Chicago'
        city:
          type: object
          additionalProperties: false
          properties:
            name:
              type: string
              example: 'Prague'
        country:
          schema:
            $ref: '#/components/schemas/Location'
          example:
            code: 'US'
            name: 'United States'
        continent:
          schema:
            $ref: '#/components/schemas/Location'
          example:
            code: 'NA'
            name: 'North America'
        subdivisions:
          type: array
          items:
            $ref: '#/components/schemas/Subdivision'
      required:
        - accuracyRadius
        - continent
        - country
        - latitude
        - longitude
        - timezone
      title: IPLocation
    Location:
      type: object
      additionalProperties: false
      properties:
        code:
          type: string
          minLength: 2
          maxLength: 2
          example: 'US'
        name:
          type: string
          example: 'United States'
      required:
        - code
        - name
      title: Continent
    Subdivision:
      type: object
      additionalProperties: false
      properties:
        isoCode:
          type: string
          example: '10'
        name:
          type: string
          example: 'Hlavni mesto Praha'